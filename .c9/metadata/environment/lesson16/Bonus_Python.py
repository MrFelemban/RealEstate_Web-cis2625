{"filter":false,"title":"Bonus_Python.py","tooltip":"/lesson16/Bonus_Python.py","undoManager":{"mark":36,"position":36,"stack":[[{"start":{"row":0,"column":0},"end":{"row":138,"column":14},"action":"insert","lines":["import pygame as pg","import sys","from random import randrange","","vec2 = pg.math.Vector2","","","class Snake:","    def __init__(self, game):","        self.game = game","        self.size = game.TILE_SIZE","        self.rect = pg.rect.Rect([0, 0, game.TILE_SIZE - 2, game.TILE_SIZE - 2])","        self.range = self.size // 2, self.game.WINDOW_SIZE - self.size // 2, self.size)","        self.rect.center = self.get_random_position()","        self.direction = vec2(0, 0)","        self.step_delay = 100  # milliseconds","        self.time = 0","        self.length = 1","        self.segments = []","        self.directions = {pg.K_w: 1, pg.K_s: 1, pg.K_a: 1, pg.K_d: 1}","        ","    def control(self, event):","        if event.type == pg.KEYDOWN:","            if event.key == pg.K_w and self.directions[pg.K_w]:","                self.direction = vec2(0, -self.size)","                self.directions = {pg.K_w: 1, pg.K_s: 0, pg.K_a: 1, pg.K_d: 1}","","            if event.key == pg.K_s and self.directions[pg.K_s]:","                self.direction = vec2(0, self.size)","                self.directions = {pg.K_w: 0, pg.K_s: 1, pg.K_a: 1, pg.K_d: 1}","","            if event.key == pg.K_a and self.directions[pg.K_a]:","                self.direction = vec2(-self.size, 0)","                self.directions = {pg.K_w: 1, pg.K_s: 1, pg.K_a: 1, pg.K_d: 0}","","            if event.key == pg.K_d and self.directions[pg.K_d]:","                self.direction = vec2(self.size, 0)","                self.directions = {pg.K_w: 1, pg.K_s: 1, pg.K_a: 0, pg.K_d: 1}","","    def delta_time(self):","        time_now = pg.time.get_ticks()","        if time_now - self.time > self.step_delay:","            self.time = time_now","            return True","        return False","","    def get_random_position(self):","        return [randrange(*self.range), randrange(*self.range)]","","    def check_borders(self):","        if self.rect.left < 0 or self.rect.right > self.game.WINDOW_SIZE:","            self.game.new_game()","        if self.rect.top < 0 or self.rect.bottom > self.game.WINDOW_SIZE:","            self.game.new_game()","","    def check_food(self):","        if self.rect.center == self.game.food.rect.center:","            self.game.food.rect.center = self.get_random_position()","            self.length += 1","","    def check_selfeating(self):","        if len(self.segments) != len(set(segment.center for segment in self.segments)):","            self.game.new_game()","","    def move(self):","        if self.delta_time():","            self.rect.move_ip(self.direction)","            self.segments.append(self.rect.copy())","            self.segments = self.segments[-self.length:]","","    def update(self):","        self.check_selfeating()","        self.check_borders()","        self.check_food()","        self.move()","","    def draw(self):","        [pg.draw.rect(self.game.screen, 'green', segment) for segment in self.segments]","","","class Food:","    def __init__(self, game):","        self.game = game","        self.size = game.TILE_SIZE","        self.rect = pg.rect.Rect([0, 0, game.TILE_SIZE - 2, game.TILE_SIZE - 2])","        self.rect.center = self.game.snake.get_random_position()","","    def draw(self):","        pg.draw.rect(self.game.screen, 'red', self.rect)","","","class Game:","    def __init__(self):","        pg.init()","        self.WINDOW_SIZE = 1000","        self.TILE_SIZE = 50","        self.screen = pg.display.set_mode([self.WINDOW_SIZE] * 2)","        self.clock = pg.time.Clock()","        self.new_game()","","    def draw_grid(self):","        [pg.draw.line(self.screen, [50] * 3, (x, 0), (x, self.WINDOW_SIZE))","                                             for x in range(0, self.WINDOW_SIZE, self.TILE_SIZE)]","        [pg.draw.line(self.screen, [50] * 3, (0, y), (self.WINDOW_SIZE, y))","                                             for y in range(0, self.WINDOW_SIZE, self.TILE_SIZE)]","","    def new_game(self):","        self.snake = Snake(self)","        self.food = Food(self)","","    def update(self):","        self.snake.update()","        pg.display.flip()","        self.clock.tick(60)","","    def draw(self):","        self.screen.fill('black')","        self.draw_grid()","        self.food.draw()","        self.snake.draw()","","    def check_event(self):","        for event in pg.event.get():","            if event.type == pg.QUIT:","                pg.quit()","                sys.exit()","            # snake control","            self.snake.control(event)","","    def run(self):","        while True:","            self.check_event()","            self.update()","            self.draw()","","","if __name__ == '__main__':","    game = Game()","    game.run()"],"id":1}],[{"start":{"row":21,"column":4},"end":{"row":37,"column":78},"action":"remove","lines":["def control(self, event):","        if event.type == pg.KEYDOWN:","            if event.key == pg.K_w and self.directions[pg.K_w]:","                self.direction = vec2(0, -self.size)","                self.directions = {pg.K_w: 1, pg.K_s: 0, pg.K_a: 1, pg.K_d: 1}","","            if event.key == pg.K_s and self.directions[pg.K_s]:","                self.direction = vec2(0, self.size)","                self.directions = {pg.K_w: 0, pg.K_s: 1, pg.K_a: 1, pg.K_d: 1}","","            if event.key == pg.K_a and self.directions[pg.K_a]:","                self.direction = vec2(-self.size, 0)","                self.directions = {pg.K_w: 1, pg.K_s: 1, pg.K_a: 1, pg.K_d: 0}","","            if event.key == pg.K_d and self.directions[pg.K_d]:","                self.direction = vec2(self.size, 0)","                self.directions = {pg.K_w: 1, pg.K_s: 1, pg.K_a: 0, pg.K_d: 1}"],"id":2},{"start":{"row":21,"column":4},"end":{"row":50,"column":0},"action":"insert","lines":["def control(self, event):","    if event.type == pg.KEYDOWN:","        if event.key == pg.K_w and self.directions[pg.K_w]:","            self.direction = vec2(0, -self.size)","            self.directions[pg.K_w] = 1","            self.directions[pg.K_s] = 0","            self.directions[pg.K_a] = 1","            self.directions[pg.K_d] = 1","","        if event.key == pg.K_s and self.directions[pg.K_s]:","            self.direction = vec2(0, self.size)","            self.directions[pg.K_w] = 0","            self.directions[pg.K_s] = 1","            self.directions[pg.K_a] = 1","            self.directions[pg.K_d] = 1","","        if event.key == pg.K_a and self.directions[pg.K_a]:","            self.direction = vec2(-self.size, 0)","            self.directions[pg.K_w] = 1","            self.directions[pg.K_s] = 1","            self.directions[pg.K_a] = 1","            self.directions[pg.K_d] = 0","","        if event.key == pg.K_d and self.directions[pg.K_d]:","            self.direction = vec2(self.size, 0)","            self.directions[pg.K_w] = 1","            self.directions[pg.K_s] = 1","            self.directions[pg.K_a] = 0","            self.directions[pg.K_d] = 1",""]}],[{"start":{"row":0,"column":0},"end":{"row":1,"column":0},"action":"insert","lines":["",""],"id":3}],[{"start":{"row":0,"column":0},"end":{"row":0,"column":1},"action":"insert","lines":["C"],"id":4},{"start":{"row":0,"column":1},"end":{"row":0,"column":2},"action":"insert","lines":["o"]},{"start":{"row":0,"column":2},"end":{"row":0,"column":3},"action":"insert","lines":["r"]},{"start":{"row":0,"column":3},"end":{"row":0,"column":4},"action":"insert","lines":["r"]},{"start":{"row":0,"column":4},"end":{"row":0,"column":5},"action":"insert","lines":["e"]},{"start":{"row":0,"column":5},"end":{"row":0,"column":6},"action":"insert","lines":["c"]},{"start":{"row":0,"column":6},"end":{"row":0,"column":7},"action":"insert","lines":["t"]}],[{"start":{"row":0,"column":7},"end":{"row":0,"column":8},"action":"insert","lines":[" "],"id":5},{"start":{"row":0,"column":8},"end":{"row":0,"column":9},"action":"insert","lines":["c"]},{"start":{"row":0,"column":9},"end":{"row":0,"column":10},"action":"insert","lines":["o"]},{"start":{"row":0,"column":10},"end":{"row":0,"column":11},"action":"insert","lines":["d"]},{"start":{"row":0,"column":11},"end":{"row":0,"column":12},"action":"insert","lines":["e"]}],[{"start":{"row":0,"column":12},"end":{"row":0,"column":13},"action":"insert","lines":[" "],"id":6},{"start":{"row":0,"column":13},"end":{"row":0,"column":14},"action":"insert","lines":["e"]},{"start":{"row":0,"column":14},"end":{"row":0,"column":15},"action":"insert","lines":["r"]},{"start":{"row":0,"column":15},"end":{"row":0,"column":16},"action":"insert","lines":["r"]},{"start":{"row":0,"column":16},"end":{"row":0,"column":17},"action":"insert","lines":["o"]},{"start":{"row":0,"column":17},"end":{"row":0,"column":18},"action":"insert","lines":["r"]}],[{"start":{"row":0,"column":18},"end":{"row":0,"column":19},"action":"insert","lines":[" "],"id":7},{"start":{"row":0,"column":19},"end":{"row":0,"column":20},"action":"insert","lines":["a"]},{"start":{"row":0,"column":20},"end":{"row":0,"column":21},"action":"insert","lines":["n"]},{"start":{"row":0,"column":21},"end":{"row":0,"column":22},"action":"insert","lines":["d"]}],[{"start":{"row":0,"column":22},"end":{"row":0,"column":23},"action":"insert","lines":[" "],"id":8},{"start":{"row":0,"column":23},"end":{"row":0,"column":24},"action":"insert","lines":["t"]},{"start":{"row":0,"column":24},"end":{"row":0,"column":25},"action":"insert","lines":["e"]},{"start":{"row":0,"column":25},"end":{"row":0,"column":26},"action":"insert","lines":["s"]},{"start":{"row":0,"column":26},"end":{"row":0,"column":27},"action":"insert","lines":["t"]}],[{"start":{"row":0,"column":27},"end":{"row":0,"column":28},"action":"insert","lines":[" "],"id":9},{"start":{"row":0,"column":28},"end":{"row":0,"column":29},"action":"insert","lines":["a"]},{"start":{"row":0,"column":29},"end":{"row":0,"column":30},"action":"insert","lines":["n"]},{"start":{"row":0,"column":30},"end":{"row":0,"column":31},"action":"insert","lines":["d"]}],[{"start":{"row":0,"column":31},"end":{"row":0,"column":32},"action":"insert","lines":[" "],"id":10},{"start":{"row":0,"column":32},"end":{"row":0,"column":33},"action":"insert","lines":["r"]},{"start":{"row":0,"column":33},"end":{"row":0,"column":34},"action":"insert","lines":["e"]},{"start":{"row":0,"column":34},"end":{"row":0,"column":35},"action":"insert","lines":["w"]},{"start":{"row":0,"column":35},"end":{"row":0,"column":36},"action":"insert","lines":["r"]},{"start":{"row":0,"column":36},"end":{"row":0,"column":37},"action":"insert","lines":["t"]}],[{"start":{"row":0,"column":37},"end":{"row":0,"column":38},"action":"insert","lines":["i"],"id":11},{"start":{"row":0,"column":38},"end":{"row":0,"column":39},"action":"insert","lines":["e"]}],[{"start":{"row":0,"column":39},"end":{"row":0,"column":40},"action":"insert","lines":[" "],"id":12},{"start":{"row":0,"column":40},"end":{"row":0,"column":41},"action":"insert","lines":["t"]}],[{"start":{"row":0,"column":41},"end":{"row":0,"column":42},"action":"insert","lines":["h"],"id":13},{"start":{"row":0,"column":42},"end":{"row":0,"column":43},"action":"insert","lines":["e"]}],[{"start":{"row":0,"column":43},"end":{"row":0,"column":44},"action":"insert","lines":[" "],"id":14},{"start":{"row":0,"column":44},"end":{"row":0,"column":45},"action":"insert","lines":["w"]},{"start":{"row":0,"column":45},"end":{"row":0,"column":46},"action":"insert","lines":["h"]},{"start":{"row":0,"column":46},"end":{"row":0,"column":47},"action":"insert","lines":["o"]},{"start":{"row":0,"column":47},"end":{"row":0,"column":48},"action":"insert","lines":["l"]},{"start":{"row":0,"column":48},"end":{"row":0,"column":49},"action":"insert","lines":["e"]}],[{"start":{"row":0,"column":49},"end":{"row":0,"column":50},"action":"insert","lines":[" "],"id":15},{"start":{"row":0,"column":50},"end":{"row":0,"column":51},"action":"insert","lines":["c"]},{"start":{"row":0,"column":51},"end":{"row":0,"column":52},"action":"insert","lines":["o"]},{"start":{"row":0,"column":52},"end":{"row":0,"column":53},"action":"insert","lines":["d"]},{"start":{"row":0,"column":53},"end":{"row":0,"column":54},"action":"insert","lines":["e"]}],[{"start":{"row":0,"column":0},"end":{"row":0,"column":1},"action":"insert","lines":["#"],"id":16}],[{"start":{"row":0,"column":0},"end":{"row":152,"column":14},"action":"remove","lines":["#Correct code error and test and rewrtie the whole code","import pygame as pg","import sys","from random import randrange","","vec2 = pg.math.Vector2","","","class Snake:","    def __init__(self, game):","        self.game = game","        self.size = game.TILE_SIZE","        self.rect = pg.rect.Rect([0, 0, game.TILE_SIZE - 2, game.TILE_SIZE - 2])","        self.range = self.size // 2, self.game.WINDOW_SIZE - self.size // 2, self.size)","        self.rect.center = self.get_random_position()","        self.direction = vec2(0, 0)","        self.step_delay = 100  # milliseconds","        self.time = 0","        self.length = 1","        self.segments = []","        self.directions = {pg.K_w: 1, pg.K_s: 1, pg.K_a: 1, pg.K_d: 1}","        ","    def control(self, event):","    if event.type == pg.KEYDOWN:","        if event.key == pg.K_w and self.directions[pg.K_w]:","            self.direction = vec2(0, -self.size)","            self.directions[pg.K_w] = 1","            self.directions[pg.K_s] = 0","            self.directions[pg.K_a] = 1","            self.directions[pg.K_d] = 1","","        if event.key == pg.K_s and self.directions[pg.K_s]:","            self.direction = vec2(0, self.size)","            self.directions[pg.K_w] = 0","            self.directions[pg.K_s] = 1","            self.directions[pg.K_a] = 1","            self.directions[pg.K_d] = 1","","        if event.key == pg.K_a and self.directions[pg.K_a]:","            self.direction = vec2(-self.size, 0)","            self.directions[pg.K_w] = 1","            self.directions[pg.K_s] = 1","            self.directions[pg.K_a] = 1","            self.directions[pg.K_d] = 0","","        if event.key == pg.K_d and self.directions[pg.K_d]:","            self.direction = vec2(self.size, 0)","            self.directions[pg.K_w] = 1","            self.directions[pg.K_s] = 1","            self.directions[pg.K_a] = 0","            self.directions[pg.K_d] = 1","","","    def delta_time(self):","        time_now = pg.time.get_ticks()","        if time_now - self.time > self.step_delay:","            self.time = time_now","            return True","        return False","","    def get_random_position(self):","        return [randrange(*self.range), randrange(*self.range)]","","    def check_borders(self):","        if self.rect.left < 0 or self.rect.right > self.game.WINDOW_SIZE:","            self.game.new_game()","        if self.rect.top < 0 or self.rect.bottom > self.game.WINDOW_SIZE:","            self.game.new_game()","","    def check_food(self):","        if self.rect.center == self.game.food.rect.center:","            self.game.food.rect.center = self.get_random_position()","            self.length += 1","","    def check_selfeating(self):","        if len(self.segments) != len(set(segment.center for segment in self.segments)):","            self.game.new_game()","","    def move(self):","        if self.delta_time():","            self.rect.move_ip(self.direction)","            self.segments.append(self.rect.copy())","            self.segments = self.segments[-self.length:]","","    def update(self):","        self.check_selfeating()","        self.check_borders()","        self.check_food()","        self.move()","","    def draw(self):","        [pg.draw.rect(self.game.screen, 'green', segment) for segment in self.segments]","","","class Food:","    def __init__(self, game):","        self.game = game","        self.size = game.TILE_SIZE","        self.rect = pg.rect.Rect([0, 0, game.TILE_SIZE - 2, game.TILE_SIZE - 2])","        self.rect.center = self.game.snake.get_random_position()","","    def draw(self):","        pg.draw.rect(self.game.screen, 'red', self.rect)","","","class Game:","    def __init__(self):","        pg.init()","        self.WINDOW_SIZE = 1000","        self.TILE_SIZE = 50","        self.screen = pg.display.set_mode([self.WINDOW_SIZE] * 2)","        self.clock = pg.time.Clock()","        self.new_game()","","    def draw_grid(self):","        [pg.draw.line(self.screen, [50] * 3, (x, 0), (x, self.WINDOW_SIZE))","                                             for x in range(0, self.WINDOW_SIZE, self.TILE_SIZE)]","        [pg.draw.line(self.screen, [50] * 3, (0, y), (self.WINDOW_SIZE, y))","                                             for y in range(0, self.WINDOW_SIZE, self.TILE_SIZE)]","","    def new_game(self):","        self.snake = Snake(self)","        self.food = Food(self)","","    def update(self):","        self.snake.update()","        pg.display.flip()","        self.clock.tick(60)","","    def draw(self):","        self.screen.fill('black')","        self.draw_grid()","        self.food.draw()","        self.snake.draw()","","    def check_event(self):","        for event in pg.event.get():","            if event.type == pg.QUIT:","                pg.quit()","                sys.exit()","            # snake control","            self.snake.control(event)","","    def run(self):","        while True:","            self.check_event()","            self.update()","            self.draw()","","","if __name__ == '__main__':","    game = Game()","    game.run()"],"id":17},{"start":{"row":0,"column":0},"end":{"row":78,"column":0},"action":"insert","lines":["import pygame as pg","import sys","from random import randrange","","vec2 = pg.math.Vector2","","","class Snake:","    def __init__(self, game):","        self.game = game","        self.size = game.TILE_SIZE","        self.rect = pg.rect.Rect([0, 0, game.TILE_SIZE - 2, game.TILE_SIZE - 2])","        self.range = self.size // 2, self.game.WINDOW_SIZE - self.size // 2, self.size","        self.rect.center = self.get_random_position()","        self.direction = vec2(0, 0)","        self.step_delay = 100  # milliseconds","        self.time = 0","        self.length = 1","        self.segments = []","        self.directions = {pg.K_w: 1, pg.K_s: 1, pg.K_a: 1, pg.K_d: 1}","        ","    def control(self, event):","        if event.type == pg.KEYDOWN:","            if event.key == pg.K_w and self.directions[pg.K_w]:","                self.direction = vec2(0, -self.size)","                self.directions[pg.K_w] = 1","                self.directions[pg.K_s] = 0","                self.directions[pg.K_a] = 1","                self.directions[pg.K_d] = 1","","            if event.key == pg.K_s and self.directions[pg.K_s]:","                self.direction = vec2(0, self.size)","                self.directions[pg.K_w] = 0","                self.directions[pg.K_s] = 1","                self.directions[pg.K_a] = 1","                self.directions[pg.K_d] = 1","","            if event.key == pg.K_a and self.directions[pg.K_a]:","                self.direction = vec2(-self.size, 0)","                self.directions[pg.K_w] = 1","                self.directions[pg.K_s] = 1","                self.directions[pg.K_a] = 1","                self.directions[pg.K_d] = 0","","            if event.key == pg.K_d and self.directions[pg.K_d]:","                self.direction = vec2(self.size, 0)","                self.directions[pg.K_w] = 1","                self.directions[pg.K_s] = 1","                self.directions[pg.K_a] = 0","                self.directions[pg.K_d] = 1","","","    def delta_time(self):","        time_now = pg.time.get_ticks()","        if time_now - self.time > self.step_delay:","            self.time = time_now","            return True","        return False","","    def get_random_position(self):","        return [randrange(*self.range), randrange(*self.range)]","","    def check_borders(self):","        # Check if the snake hits the borders of the screen","        if self.rect.left < 0 or self.rect.right > self.game.WINDOW_SIZE:","            self.game.new_game()","        if self.rect.top < 0 or self.rect.bottom > self.game.WINDOW_SIZE:","            self.game.new_game()","","    def check_food(self):","        # Check if the snake hits the food","        if self.rect.center == self.game.food.rect.center:","            self.game.food.rect.center = self.get_random_position()","            self.length += 1","","    def check_selfeating(self):","        # Check if the snake hits itself","        if len(self.segments) !=",""]}],[{"start":{"row":77,"column":8},"end":{"row":77,"column":9},"action":"insert","lines":["#"],"id":18}],[{"start":{"row":77,"column":8},"end":{"row":77,"column":9},"action":"remove","lines":["#"],"id":19}],[{"start":{"row":75,"column":3},"end":{"row":77,"column":32},"action":"remove","lines":[" def check_selfeating(self):","        # Check if the snake hits itself","        if len(self.segments) !="],"id":20},{"start":{"row":75,"column":3},"end":{"row":81,"column":0},"action":"insert","lines":["def check_selfeating(self):","    # Check if the snake hits itself","    for segment in self.segments[1:]:  # Skip the head","        if self.rect.colliderect(segment):","            self.game.new_game()","            break",""]}],[{"start":{"row":76,"column":4},"end":{"row":76,"column":8},"action":"insert","lines":["    "],"id":21}],[{"start":{"row":77,"column":3},"end":{"row":77,"column":4},"action":"insert","lines":[" "],"id":22}],[{"start":{"row":77,"column":4},"end":{"row":77,"column":8},"action":"insert","lines":["    "],"id":23}],[{"start":{"row":77,"column":4},"end":{"row":77,"column":8},"action":"remove","lines":["    "],"id":24}],[{"start":{"row":77,"column":4},"end":{"row":77,"column":8},"action":"insert","lines":["    "],"id":25}],[{"start":{"row":78,"column":8},"end":{"row":78,"column":12},"action":"insert","lines":["    "],"id":26}],[{"start":{"row":79,"column":12},"end":{"row":79,"column":16},"action":"insert","lines":["    "],"id":27}],[{"start":{"row":80,"column":12},"end":{"row":80,"column":16},"action":"insert","lines":["    "],"id":28}],[{"start":{"row":75,"column":3},"end":{"row":75,"column":4},"action":"insert","lines":[" "],"id":29}],[{"start":{"row":78,"column":8},"end":{"row":78,"column":12},"action":"remove","lines":["    "],"id":30}],[{"start":{"row":78,"column":8},"end":{"row":78,"column":9},"action":"insert","lines":[" "],"id":31}],[{"start":{"row":77,"column":8},"end":{"row":77,"column":9},"action":"remove","lines":[" "],"id":32}],[{"start":{"row":78,"column":9},"end":{"row":78,"column":10},"action":"insert","lines":[" "],"id":33}],[{"start":{"row":0,"column":0},"end":{"row":1,"column":0},"action":"insert","lines":["",""],"id":34}],[{"start":{"row":0,"column":0},"end":{"row":0,"column":1},"action":"insert","lines":["#"],"id":35},{"start":{"row":0,"column":1},"end":{"row":0,"column":2},"action":"insert","lines":["S"]},{"start":{"row":0,"column":2},"end":{"row":0,"column":3},"action":"insert","lines":["n"]},{"start":{"row":0,"column":3},"end":{"row":0,"column":4},"action":"insert","lines":["a"]},{"start":{"row":0,"column":4},"end":{"row":0,"column":5},"action":"insert","lines":["k"]},{"start":{"row":0,"column":5},"end":{"row":0,"column":6},"action":"insert","lines":["e"]}],[{"start":{"row":0,"column":6},"end":{"row":0,"column":7},"action":"insert","lines":[" "],"id":36},{"start":{"row":0,"column":7},"end":{"row":0,"column":8},"action":"insert","lines":["G"]},{"start":{"row":0,"column":8},"end":{"row":0,"column":9},"action":"insert","lines":["a"]},{"start":{"row":0,"column":9},"end":{"row":0,"column":10},"action":"insert","lines":["m"]},{"start":{"row":0,"column":10},"end":{"row":0,"column":11},"action":"insert","lines":["e"]}],[{"start":{"row":0,"column":11},"end":{"row":0,"column":12},"action":"insert","lines":[" "],"id":37},{"start":{"row":0,"column":12},"end":{"row":0,"column":13},"action":"insert","lines":["c"]},{"start":{"row":0,"column":13},"end":{"row":0,"column":14},"action":"insert","lines":["o"]},{"start":{"row":0,"column":14},"end":{"row":0,"column":15},"action":"insert","lines":["d"]},{"start":{"row":0,"column":15},"end":{"row":0,"column":16},"action":"insert","lines":["e"]}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":10,"column":24},"end":{"row":10,"column":24},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1680210496388,"hash":"544bfdda11b444909678a1a559790a107abe32fd"}